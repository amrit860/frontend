{"ast":null,"code":"import axios from \"axios\";\nconst BaseURL = process.env.REACT_APP_BASE_URL;\n\nfunction getHeaders(isSecure) {\n  let headerOptions = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (isSecure) {\n    headerOptions[\"Authorization\"] = localStorage.getItem(\"token\");\n  }\n\n  return headerOptions;\n}\n\nconst http = axios.create({\n  baseURL: BaseURL,\n  responseType: \"json\"\n});\n\nfunction get(url, params = {}, isSecure = false) {\n  return http.get(url, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction post(url, data, params = {}, isSecure = false) {\n  return http.post(url, data, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction put(url, data, params = {}, isSecure = false) {\n  return http.put(url, data, {\n    headers: getHeaders(isSecure),\n    params\n  });\n}\n\nfunction remove(url, isSecure) {\n  return http.delete(url, {\n    headers: getHeaders(isSecure)\n  });\n}\n\nfunction upload(data, files) {\n  console.log(\"data is>>>\", data);\n  console.log(\"file is...\", files, files.length);\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData();\n    console.log(\"dghhjgdhdsgfdhgdh.........................................\");\n\n    if (files && files.length) {\n      // files.forEach(file => {\n      //     formData.append('img', file, files.name)\n      // })\n      console.log(\"here at append ....................\", files[0].name);\n      formData.append(\"img\", files[0], files[0].name);\n    } // append textual data in form data\n\n\n    for (let key in data) {\n      formData.append(key, data[key]);\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve(xhr.response);\n        } else {\n          reject(xhr.response);\n        }\n      }\n    };\n\n    xhr.open(\"POST\", `${BaseURL}/product?token=${localStorage.getItem(\"token\")}`, true);\n    xhr.send(formData);\n  });\n}\n\nexport const httpClient = {\n  get,\n  post,\n  remove,\n  put,\n  upload,\n  getHeaders\n};","map":{"version":3,"sources":["/media/amrit/local Disk/frontend/AmritProject/fronted/src/utils/httpclient.js"],"names":["axios","BaseURL","process","env","REACT_APP_BASE_URL","getHeaders","isSecure","headerOptions","localStorage","getItem","http","create","baseURL","responseType","get","url","params","headers","post","data","put","remove","delete","upload","files","console","log","length","Promise","resolve","reject","xhr","XMLHttpRequest","formData","FormData","name","append","key","onreadystatechange","readyState","status","response","open","send","httpClient"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst BaseURL = process.env.REACT_APP_BASE_URL;\n\nfunction getHeaders(isSecure) {\n  let headerOptions = {\n    \"Content-Type\": \"application/json\",\n  };\n  if (isSecure) {\n    headerOptions[\"Authorization\"] = localStorage.getItem(\"token\");\n  }\n  return headerOptions;\n}\n\nconst http = axios.create({\n  baseURL: BaseURL,\n  responseType: \"json\",\n});\n\nfunction get(url, params = {}, isSecure = false) {\n  return http.get(url, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction post(url, data, params = {}, isSecure = false) {\n  return http.post(url, data, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction put(url, data, params = {}, isSecure = false) {\n  return http.put(url, data, {\n    headers: getHeaders(isSecure),\n    params,\n  });\n}\n\nfunction remove(url, isSecure) {\n  return http.delete(url, {\n    headers: getHeaders(isSecure),\n  });\n}\n\nfunction upload(data, files) {\n  console.log(\"data is>>>\", data);\n  console.log(\"file is...\", files, files.length);\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const formData = new FormData();\n    console.log(\"dghhjgdhdsgfdhgdh.........................................\");\n    if (files && files.length) {\n      // files.forEach(file => {\n      //     formData.append('img', file, files.name)\n      // })\n      console.log(\"here at append ....................\", files[0].name);\n      formData.append(\"img\", files[0], files[0].name);\n    }\n    // append textual data in form data\n    for (let key in data) {\n      formData.append(key, data[key]);\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve(xhr.response);\n        } else {\n          reject(xhr.response);\n        }\n      }\n    };\n    xhr.open(\n      \"POST\",\n      `${BaseURL}/product?token=${localStorage.getItem(\"token\")}`,\n      true\n    );\n    xhr.send(formData);\n  });\n}\n\nexport const httpClient = {\n  get,\n  post,\n  remove,\n  put,\n  upload,\n  getHeaders\n};\n"]},"metadata":{},"sourceType":"module"}